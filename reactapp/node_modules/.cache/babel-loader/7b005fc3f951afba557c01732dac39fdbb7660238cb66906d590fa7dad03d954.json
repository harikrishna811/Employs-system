{"ast":null,"code":"// Generated by LiveScript 1.6.0\nvar split, join, lines, unlines, words, unwords, chars, unchars, reverse, repeat, capitalize, camelize, dasherize;\nsplit = curry$(function (sep, str) {\n  return str.split(sep);\n});\njoin = curry$(function (sep, xs) {\n  return xs.join(sep);\n});\nlines = function (str) {\n  if (!str.length) {\n    return [];\n  }\n  return str.split('\\n');\n};\nunlines = function (it) {\n  return it.join('\\n');\n};\nwords = function (str) {\n  if (!str.length) {\n    return [];\n  }\n  return str.split(/[ ]+/);\n};\nunwords = function (it) {\n  return it.join(' ');\n};\nchars = function (it) {\n  return it.split('');\n};\nunchars = function (it) {\n  return it.join('');\n};\nreverse = function (str) {\n  return str.split('').reverse().join('');\n};\nrepeat = curry$(function (n, str) {\n  var result, i$;\n  result = '';\n  for (i$ = 0; i$ < n; ++i$) {\n    result += str;\n  }\n  return result;\n});\ncapitalize = function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\ncamelize = function (it) {\n  return it.replace(/[-_]+(.)?/g, function (arg$, c) {\n    return (c != null ? c : '').toUpperCase();\n  });\n};\ndasherize = function (str) {\n  return str.replace(/([^-A-Z])([A-Z]+)/g, function (arg$, lower, upper) {\n    return lower + \"-\" + (upper.length > 1 ? upper : upper.toLowerCase());\n  }).replace(/^([A-Z]+)/, function (arg$, upper) {\n    if (upper.length > 1) {\n      return upper + \"-\";\n    } else {\n      return upper.toLowerCase();\n    }\n  });\n};\nmodule.exports = {\n  split: split,\n  join: join,\n  lines: lines,\n  unlines: unlines,\n  words: words,\n  unwords: unwords,\n  chars: chars,\n  unchars: unchars,\n  reverse: reverse,\n  repeat: repeat,\n  capitalize: capitalize,\n  camelize: camelize,\n  dasherize: dasherize\n};\nfunction curry$(f, bound) {\n  var context,\n    _curry = function (args) {\n      return f.length > 1 ? function () {\n        var params = args ? args.concat() : [];\n        context = bound ? context || this : this;\n        return params.push.apply(params, arguments) < f.length && arguments.length ? _curry.call(context, params) : f.apply(context, params);\n      } : f;\n    };\n  return _curry();\n}","map":{"version":3,"names":["split","join","lines","unlines","words","unwords","chars","unchars","reverse","repeat","capitalize","camelize","dasherize","curry$","sep","str","xs","length","it","n","result","i$","charAt","toUpperCase","slice","replace","arg$","c","lower","upper","toLowerCase","module","exports","f","bound","context","_curry","args","params","concat","push","apply","arguments","call"],"sources":["C:/Users/hari0/Downloads/REACT/reactapp/node_modules/prelude-ls/lib/Str.js"],"sourcesContent":["// Generated by LiveScript 1.6.0\nvar split, join, lines, unlines, words, unwords, chars, unchars, reverse, repeat, capitalize, camelize, dasherize;\nsplit = curry$(function(sep, str){\n  return str.split(sep);\n});\njoin = curry$(function(sep, xs){\n  return xs.join(sep);\n});\nlines = function(str){\n  if (!str.length) {\n    return [];\n  }\n  return str.split('\\n');\n};\nunlines = function(it){\n  return it.join('\\n');\n};\nwords = function(str){\n  if (!str.length) {\n    return [];\n  }\n  return str.split(/[ ]+/);\n};\nunwords = function(it){\n  return it.join(' ');\n};\nchars = function(it){\n  return it.split('');\n};\nunchars = function(it){\n  return it.join('');\n};\nreverse = function(str){\n  return str.split('').reverse().join('');\n};\nrepeat = curry$(function(n, str){\n  var result, i$;\n  result = '';\n  for (i$ = 0; i$ < n; ++i$) {\n    result += str;\n  }\n  return result;\n});\ncapitalize = function(str){\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\ncamelize = function(it){\n  return it.replace(/[-_]+(.)?/g, function(arg$, c){\n    return (c != null ? c : '').toUpperCase();\n  });\n};\ndasherize = function(str){\n  return str.replace(/([^-A-Z])([A-Z]+)/g, function(arg$, lower, upper){\n    return lower + \"-\" + (upper.length > 1\n      ? upper\n      : upper.toLowerCase());\n  }).replace(/^([A-Z]+)/, function(arg$, upper){\n    if (upper.length > 1) {\n      return upper + \"-\";\n    } else {\n      return upper.toLowerCase();\n    }\n  });\n};\nmodule.exports = {\n  split: split,\n  join: join,\n  lines: lines,\n  unlines: unlines,\n  words: words,\n  unwords: unwords,\n  chars: chars,\n  unchars: unchars,\n  reverse: reverse,\n  repeat: repeat,\n  capitalize: capitalize,\n  camelize: camelize,\n  dasherize: dasherize\n};\nfunction curry$(f, bound){\n  var context,\n  _curry = function(args) {\n    return f.length > 1 ? function(){\n      var params = args ? args.concat() : [];\n      context = bound ? context || this : this;\n      return params.push.apply(params, arguments) <\n          f.length && arguments.length ?\n        _curry.call(context, params) : f.apply(context, params);\n    } : f;\n  };\n  return _curry();\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}